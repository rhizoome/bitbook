#!/usr/bin/env python3

import sys
import re
import json
import tomllib
from enum import Enum

giscus_template = """
<script defer>
    window.onload = function() {{
        const targetContainer = document.getElementById('giscus');
        if (targetContainer) {{
              const gs = document.createElement('script');
              gs.src = "https://giscus.app/client.js";
              gs.setAttribute('data-repo', 'rhizoome/bitbook');
              gs.setAttribute('data-repo-id', 'R_kgDONbo_Fg');
              gs.setAttribute('data-category', 'Book');
              gs.setAttribute('data-category-id', 'DIC_kwDONbo_Fs4ClGWs');
              gs.setAttribute('data-mapping', 'specific');
              gs.setAttribute('data-term', '{giscus_id}');
              gs.setAttribute('data-strict', '0');
              gs.setAttribute('data-reactions-enabled', '1');
              gs.setAttribute('data-emit-metadata', '0');
              gs.setAttribute('data-theme', 'preferred_color_scheme');
              gs.setAttribute('data-lang', 'en');
              gs.setAttribute('data-loading', 'lazy');
              gs.setAttribute('crossorigin', 'anonymous');
              gs.async = true;
              targetContainer.appendChild(gs)
        }} else {{
              console.error('Target container not found: #giscus');
        }}
    }};
</script>
"""

class State(Enum):
    BLOCK_INACTIVE = 0
    BLOCK_ACTIVE = 1

def eprint(*args, **kwargs):
    print(*args, file=sys.stderr, **kwargs)

def format(css_class, block_lines):
    block_content = "".join(block_lines)
    return f"<div class=\"{css_class}\">\n\n{block_content}\n</div>\n\n"

image_pattern = re.compile(r"\{-([\w/.-]+)(>|<)(\d+)\|?(.*?)\}")
class_pattern = re.compile(r"^\s*\{\:([ \w-]+)\:\}\s*$")
front_pattern = re.compile(r"^\s*```toml\s*$")
end_pattern = re.compile(r"^\s*```\s*$")

def get_frontmatter(content):
    lines = content.splitlines(keepends=True)
    matter = []
    add = matter.append
    if front_pattern.match(lines[0]):
        index = 3
        for line in lines[1:]:
            if end_pattern.match(line):
                return "".join(lines[index:]), tomllib.loads("".join(matter))
            else:
                index += 1
                add(line)
    else:
        return content, {}

def add_giscus(frontmatter, content):
    if "giscus" in frontmatter:
        return content + "\n\n" + giscus_template.format(giscus_id=frontmatter["giscus"])
    return content

def class_hint(content):
    state = State.BLOCK_INACTIVE
    css_class = None
    block_lines = []
    output_lines = []
    output = output_lines.append
    for line in content.splitlines(keepends=True):
        if state == State.BLOCK_INACTIVE:
            # Check if line starts a block
            match = class_pattern.match(line)
            if match:
                state = State.BLOCK_ACTIVE
                css_class = match.group(1)
                block_lines = []
            else:
                # Just pass normal lines through
                output(line)
        elif  state == State.BLOCK_ACTIVE:
            # An empty line designates the end of the block
            if line.strip() == "":
                # Print the block inside a <div> with class `css_class`
                output(format(css_class, block_lines))
                state = State.BLOCK_INACTIVE
                css_class = None
                block_lines = []
            else:
                # Accumulate lines in the block
                block_lines.append(line)
        else:
            raise NotImplementedError()
    

    # If input ended while still in BLOCK_ACTIVE state), print what we have
    if state == State.BLOCK_ACTIVE:
        output(format(css_class, block_lines))
    return "".join(output_lines)

def image_template(match):
    image = match.group(1)
    direction = "left" if match.group(2) == "<" else "right" 
    max_width = match.group(3)
    caption = match.group(4)
    if caption:
        return f'''
<div class="sp-inline-float" data-dir="{direction}" data-px="{max_width}">
    <img src="{image}" alt="{caption}" class="sp-inline-float">
    <p class="sp-caption">{caption}</p>
</div>
'''
    else:
        return f'<img src="{image}" alt="{image}" class="sp-inline-float" data-dir="{direction}" data-px="{max_width}">'

def image_sub(content):
    return image_pattern.sub(image_template, content)

def build_news(chapters):
    relevant = [x for x in chapters if "date" in x["sp-frontmatter"].keys()]
    relevant = sorted(relevant, key=lambda x: x["sp-frontmatter"]["date"])
    news = []
    add = news.append
    for chapter in relevant[:10]:
        add(f"- {chapter["sp-frontmatter"]["date"]} [{chapter["name"]}]({chapter["path"]})")
    return "\n".join(news)

def first_pass(context, book, item):
    chapter = item["Chapter"]
    context["chapters"].append(chapter)
    content = chapter["content"]
    content = image_sub(content)
    content, frontmatter = get_frontmatter(content)
    chapter["sp-frontmatter"] = frontmatter
    content = class_hint(content)
    content = add_giscus(frontmatter, content)
    chapter["content"] = content

def second_pass(context, book, item):
    chapter = item["Chapter"]
    content = chapter["content"]
    if chapter["name"] in ("BitBook", "News"):
        content = content.replace("{-sp-news-}", build_news(context["chapters"]))
    chapter["content"] = content


def do_items(context, book, item, do_pass):
    chapter = item.get("Chapter")
    if chapter:
        do_pass(context, book, item)
        for sub_item in chapter["sub_items"]:
            do_items(context, book, sub_item, do_pass)

def run(context, book, do_pass):
    for section in book["sections"]:
        do_items(context, book, section, do_pass)
    return context, book

if __name__ == "__main__":
    if len(sys.argv) > 1: # we check if we received any argument
        if sys.argv[1] == "supports": 
            sys.exit(0)

    context, book = json.load(sys.stdin)
    context["chapters"] = []
    context, book = run(context, book, first_pass)
    context, book = run(context, book, second_pass)
    print(json.dumps(book))
